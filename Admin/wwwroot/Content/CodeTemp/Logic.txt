using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Logic
{
	using System.Collections;
    using Toolkit;
    using Logic.Class;
    using Entitys.SysClass;
    using DbFrame;
    using System.Threading.Tasks;
    using Entitys;

    public class <#ClassName#> : BaseLogic
    {
        #region  增、删、改、查

        /// <summary>
        /// 数据源
        /// </summary>
        /// <param name="Page"></param>
        /// <param name="Rows"></param>
        /// <param name="Search"></param>
        /// <returns></returns>
        public Task<TableViewModel> FindList(int Page, int Rows, Hashtable Search)
        {
	<#QueryCode#>

            _IQuery.TakePage(Page, Rows, out int TotalCount);

            return this.GetTableViewModel(_IQuery, TotalCount, Rows);
        }

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public string Save(<#TableName#> model)
        {
            db.Commit(() =>
            {
                if (model.<#KeyName#>.ToGuid() == Guid.Empty)
                {
                    model.<#KeyName#> = db.Insert(model).ToGuid();
                    if (model.<#KeyName#>.ToGuid() == Guid.Empty) throw new MessageBox(this.ErrorMessage);
                }
                else
                {
                    if (db.UpdateById(model) == 0) throw new MessageBox(this.ErrorMessage);
                }
            });

            return model.<#KeyName#>.ToGuidStr();
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="Ids"></param>
        public void Delete(List<Guid> Ids)
        {
            db.Commit(() =>
            {
                foreach (var item in Ids)
                {
                    db.DeleteById<<#TableName#>>(item);
                }
            });
        }

        /// <summary>
        /// 表单数据加载
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Hashtable LoadForm(Guid? Id)
        {
            var _<#TableName#> = db.FindById<<#TableName#>>(Id);

            var _Form = AppBase.ObjectToHashtable(new
            {
                Id
            }, _<#TableName#>);

            return _Form;
        }

		#endregion
    }
}